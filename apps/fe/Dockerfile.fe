# 1. Base image for fe
FROM node:18-alpine AS base

# Install necessary packages
RUN apk add --no-cache libc6-compat
RUN apk update

# Set the working directory inside the container
WORKDIR /app

# Install global packages
RUN npm install -g turbo tailwindcss 

# 2. Builder stage for fe
FROM base AS builder

# Copy everything to the container
COPY . .

# Prune the monorepo to include what's needed for fe
RUN turbo prune --scope="@repo/fe" --docker

# Log the contents of the output directory after pruning
RUN echo "Contents of /app/out/full after pruning:" && ls -la /app/out/full

# Install dependencies based on pruned output
COPY package-lock.json ./out/full/package-lock.json
RUN npm install --prefix ./out/full

# Log installed modules
RUN echo "Installed modules in /app/out/full/node_modules:" && ls -la /app/out/full/node_modules

# 3. Installer stage for fe
FROM base AS installer

# Set the working directory
WORKDIR /app

# Copy the pruned output from the builder stage
COPY --from=builder /app/out/full ./out/full

# Copy the packages and apps folders
# COPY ../../packages ./packages
# COPY ../../apps ./apps

# Set the working directory for fe
WORKDIR /app/apps/fe

# Copy the next module from out/full to fe
COPY --from=builder /app/out/full/node_modules/next ./node_modules/next

# Build the fe application
RUN npm run build

# Log the contents of the built application
RUN echo "Contents of the built fe application:" && ls -la /app/apps/fe

# 4. Runner stage for fe
FROM base AS fe_runner

# Set the working directory
WORKDIR /app

# Copy the built fe app from the installer stage
COPY --from=installer /app/apps/fe ./apps/fe

# Expose the port for fe
ENV PORT=3000
EXPOSE 3000
WORKDIR /app/apps/fe
RUN npm install

# Log the final contents of the fe application before starting
RUN echo "Final contents of the fe application before starting:" && ls -la /app/apps/fe

# Production start
CMD npm run dev